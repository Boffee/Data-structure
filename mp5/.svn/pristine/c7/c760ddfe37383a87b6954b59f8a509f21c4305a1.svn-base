// **************************************************************
// *		   
// *  quadtree.cpp
// *		   
// *  Quadtree class
// *		   
// *  CS 225 Spring 2008
// *		   
// **************************************************************

#include "quadtree.h"
#include <cmath>
#include <ostream>

//empty ctor
Quadtree::Quadtree(){
    root = NULL;
}

//empty ctor node
Quadtree::QuadtreeNode::QuadtreeNode(){
    nwChild = NULL;
    neChild = NULL;
    swChild = NULL;
    seChild = NULL;
}

//ctor
Quadtree::Quadtree(PNG const & source, int resolution){
    root = NULL;
    buildTree(source,resolution);
}

//ctor node
Quadtree::QuadtreeNode::QuadtreeNode(RGBAPixel const & pix){
    nwChild = NULL;
    neChild = NULL;
    swChild = NULL;
    seChild = NULL;
    element = pix;
}

//cctor
Quadtree::Quadtree(const Quadtree & other){
    clear(root);
    res = other.res;

    height = other.height;
    root = copy(other.root);
}

//dtor
Quadtree::~Quadtree(){
    clear(root);
}

// = operator
Quadtree const & Quadtree::operator=(Quadtree const & other){
    clear(root);
    res = other.res;

    height = other.height;
    root = copy(other.root);
    int i = 0;
    QuadtreeNode * end = root;
    return *this;
}

//delete current content of quadtree and build a new one
void Quadtree::buildTree(PNG const & source, int resolution){
    clear(root);
    res = resolution;
    if (resolution == 0) {
        height = -1;
        return;
    }
    height = 0;
    while (pow(2, height) < resolution){
        height++;
    }
    root = buildTree(source, resolution, 0, 0);
}
//buildTree helper function
Quadtree::QuadtreeNode * Quadtree::buildTree(PNG const & source, int resolution, int x, int y){
    if (resolution == 1) {
        return new QuadtreeNode(*source(x,y));
    }
    QuadtreeNode * tN = new QuadtreeNode();
    //recursion
    tN->nwChild = buildTree(source, resolution/2, x, y);
    tN->neChild = buildTree(source, resolution/2, x+resolution/2, y);
    tN->swChild = buildTree(source, resolution/2, x, y+resolution/2);
    tN->seChild = buildTree(source, resolution/2, x+resolution/2, y+resolution/2);
    //set color to average of children
    //red
    tN->element.red = (tN->nwChild->element.red + tN->neChild->element.red + tN->swChild->element.red + tN->seChild->element.red)/4;
    //blue
    tN->element.blue = (tN->nwChild->element.blue + tN->neChild->element.blue + tN->swChild->element.blue + tN->seChild->element.blue)/4;
    //green
    tN->element.green = (tN->nwChild->element.green + tN->neChild->element.green + tN->swChild->element.green + tN->seChild->element.green)/4;
    return tN;
}

//get RGBAPixel at x, y
RGBAPixel Quadtree::getPixel(int x, int y) const{
    double xi = res/2-.5;
    double yi = res/2-.5;
    int rest = res/2;
    QuadtreeNode * curr = root;
    while (rest > 0) {
        rest = rest/2;
        if (curr->nwChild == NULL) {
            return curr->element;
        }
        if(x <= xi){
            xi = xi - rest;
            if (y <= yi){
                curr = curr->nwChild;
                yi = yi - rest;
            }
            else{
                curr = curr->swChild;
                yi = yi + rest;
            }
        }
        else{
            xi = xi + rest;
            if (y <= yi){
                curr = curr->neChild;
                yi = yi - rest;
            }
            else{
                curr = curr->seChild;
                yi = yi + rest;
            }
        }
    }

    return curr->element;
}

PNG Quadtree::decompress() const{
    if(root == NULL) return PNG();
    PNG out = PNG(res,res);
    for(int i = 0; i < res; i++){
        for(int j = 0; j < res; j++) {
            *out(i,j) = getPixel(i,j);
        }
    }
    return out;
}
//dtor helper
void Quadtree::clear(QuadtreeNode * curr){
    if (curr == NULL) return;
    if (curr->nwChild == NULL){
        delete curr;
        return;
    }
    clear(curr->nwChild);
    clear(curr->neChild);
    clear(curr->swChild);
    clear(curr->seChild);
    delete curr;
    return;
}


//cctor helper
Quadtree::QuadtreeNode * Quadtree::copy(QuadtreeNode * curr){
    if(curr == NULL) return NULL;
    QuadtreeNode * ncopy = new QuadtreeNode(curr->element);
    ncopy->nwChild = copy(curr->nwChild);
    ncopy->neChild = copy(curr->neChild);
    ncopy->swChild = copy(curr->swChild);
    ncopy->seChild = copy(curr->seChild);
    return ncopy;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~5.1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

void Quadtree::clockwiseRotate (){
//Rotates the Quadtree object's underlying image clockwise by 90 degrees.
    if (root == NULL) return;
    clockwiseRotate(root);
}

void Quadtree::clockwiseRotate (QuadtreeNode * curr){
    if (curr->nwChild == NULL) return;
    QuadtreeNode * temp;
    temp = curr->nwChild;
    curr->nwChild = curr->swChild;
    curr->swChild = curr->seChild;
    curr->seChild = curr->neChild;
    curr->neChild = temp;
    clockwiseRotate(curr->nwChild);
    clockwiseRotate(curr->neChild);
    clockwiseRotate(curr->swChild);
    clockwiseRotate(curr->seChild);
}

void Quadtree::prune (int tolerance){
//Compresses the image this Quadtree represents.
    pruneTest(tolerance, root);
}

void Quadtree::pruneTest(int tolerance, QuadtreeNode * curr){
    if (curr->nwChild == NULL) {
        return;
    }
    if(pruneCheck(tolerance, curr->nwChild, curr->nwChild->element))
        pruneClear(curr->nwChild);
    if(pruneCheck(tolerance, curr->neChild, curr->neChild->element))
        pruneClear(curr->neChild);
    if(pruneCheck(tolerance, curr->swChild, curr->swChild->element))
        pruneClear(curr->swChild);
    if(pruneCheck(tolerance, curr->seChild, curr->seChild->element))
        pruneClear(curr->seChild);
    pruneTest(tolerance, curr->nwChild);
    pruneTest(tolerance, curr->neChild);
    pruneTest(tolerance, curr->swChild);
    pruneTest(tolerance, curr->seChild);
}

bool Quadtree::prune (int tolerance, QuadtreeNode * curr){
    if (curr->nwChild == NULL) return true;
    bool nw = prune(tolerance, curr->nwChild);
    bool ne = prune(tolerance, curr->neChild);
    bool sw = prune(tolerance, curr->swChild);
    bool se = prune(tolerance, curr->seChild);
    if (nw && ne && sw && se){
       if(pruneCheck(tolerance, curr, curr->element)){
           return true;
       }
       else{
           if (curr->nwChild != NULL) {
               pruneClear(curr->nwChild);
               pruneClear(curr->neChild);
               pruneClear(curr->swChild);
               pruneClear(curr->seChild);
           }
           return false;
       }
    }
    else {
        if(nw) pruneClear(curr->nwChild);
        if(ne) pruneClear(curr->neChild);
        if(sw) pruneClear(curr->swChild);
        if(se) pruneClear(curr->seChild);
    }
    return false;
}

int Quadtree::tolerate(RGBAPixel const & curr, RGBAPixel const & next){
    return (int) (pow((curr.red - next.red),2) + pow((curr.green - next.green),2) + pow((curr.blue - next.blue),2));
}

bool Quadtree::pruneCheck(int tolerance, QuadtreeNode * curr, RGBAPixel const & compare)
{
    if (curr->nwChild == NULL) {
        return (tolerate(curr->element, compare) <= tolerance);
    }
    return (pruneCheck(tolerance, curr->nwChild, compare) &&
            pruneCheck(tolerance, curr->neChild, compare) &&
            pruneCheck(tolerance, curr->swChild, compare) &&
            pruneCheck(tolerance, curr->seChild, compare));
            
}

void Quadtree::pruneClear( QuadtreeNode * curr){
    clear(curr->nwChild);
    clear(curr->neChild);
    clear(curr->swChild);
    clear(curr->seChild);
    curr->nwChild = NULL;
    curr->neChild = NULL;
    curr->swChild = NULL;
    curr->seChild = NULL;
 }

int Quadtree::pruneSize (int tolerance) const{
//This function is similar to prune; however, it does not actually prune the Quadtree.
    return 0;
}

int Quadtree::idealPrune (int numLeaves) const{
//Calculates and returns the minimum tolerance necessary to guarantee that upon pruning the tree, no more than numLeaves leaves remain in the Quadtree.
    return 0;
}
/*
void Quadtree:printTree (std::ostream &out=std::cout) const{
//Given: prints the leaves of the Quadtree using a preorder traversal.
}

bool Quadtree::operator== (Quadtree const &other) const{
//Given: compares the current Quadtree with the parameter Quadtree, and determines whether or not the two are the same.
    return false;
}
*/