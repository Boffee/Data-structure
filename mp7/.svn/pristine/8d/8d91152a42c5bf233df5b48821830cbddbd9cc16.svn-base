#include <ostream>

#include "maze.h"

SquareMaze::SquareMaze()
{
    h = 0;
    w = 0;
}

void SquareMaze::makeMaze(int width, int height)
{
    if (w != 0) clear();
    w = width;
    h = height;
    n = h*w;
    
    // create grid with all walls true.
    down = new bool*[w];
    right = new bool*[w];
    check.addelements(n);
    
    for (int i = 0; i < w; i++)
    {
        down[i] = new bool[h];
        right[i] = new bool[h];
        for (int j = 0; j < h; j++)
        {
            down[i][j] = true;
            right[i][j] = true;
        }
    }
    
    int m = 0;
    while (m < n-1)
    {
        int wall = rand()%n;
        int y = wall/w;
        int x = wall%w;
        
        // 0 = right, 1 = down.
        int dir = rand()%2;
        
        // down
        if (dir == 1 && y < h-1 && check.find(wall) != check.find(wall+w))
        {
            setWall(x, y, 1, false);
            check.setunion(wall, wall+w);
            m++;
        }
        // right
        else if (dir == 0 && x < w-1 && check.find(wall) != check.find(wall+1))
        {
            setWall(x, y, 0, false);
            check.setunion(wall, wall+1);
            m++;
        }
    }
}

// not used
bool SquareMaze::canTravel(int x, int y, int dir) const
{
    if(dir == 0) return x < w-1;
    if(dir == 1) return y < h-1;
    if(dir == 2) return x > 0;
    if(dir == 3) return y > 0;
    else return false;
}

void SquareMaze::setWall(int x, int y, int dir, bool exists)
{
    // 0 for right
    if(dir == 0) right[x][y] = exists;
    // 1 for down
    if(dir == 1) down[x][y] = exists;
    // 2 for left
    if(dir == 2) right[x-1][y] = exists;
    // 3 for up
    if(dir == 3) down[x][y-w] = exists;
}


void SquareMaze::clear()
{
    if(w != 0){
        for(int i = 0; i < w; i++)
        {
            delete [] right[i];
            delete [] down[i];
        }
        delete [] down;
        delete [] right;
    }
}

PNG * SquareMaze::drawMaze() const
{
    PNG * maze = new PNG(w*10+1, h*10+1);
    // coloring top wall excluding entrance
    for(int x = 10; x < maze->width(); x++){
        *(*maze)(x, 0) = RGBAPixel(0,0,0);
    }
    // color in left wall
    for(int y = 0; y < maze->height(); y++){
        *(*maze)(0,y) = RGBAPixel(0,0,0);
    }
    // color in walls
    for(int x = 0; x < w; x++){
        for(int y = 0; y < h; y++){
            if(right[x][y] == true){
                for (int k = 0; k <= 10; k++){
                    *(*maze)((x+1)*10,y*10+k) = RGBAPixel(0,0,0);
                }
            }
            if(down[x][y] == true){
                for (int k = 0; k <= 10; k++){
                    *(*maze)(x*10+k,(y+1)*10) = RGBAPixel(0,0,0);
                }
            }
        }
    }
    return maze;
}

PNG * SquareMaze::drawMazeWithSolution()
{
    return new PNG();
}

vector<int> SquareMaze::solveMaze()
{
    return vector<int> ();
}

SquareMaze::~SquareMaze()
{
    clear();
}