/**
 * @file cartalk_puzzle.cpp
 * Holds the function which solves a CarTalk puzzler.
 *
 * @author Matt Joras
 * @date Winter 2013
 */

#include <fstream>

#include "cartalk_puzzle.h"

using namespace std;

/**
 * Solves the CarTalk puzzler described here:
 * http://www.cartalk.com/content/wordplay-anyone.
 * @return A vector of "StringTriples" (a typedef'd std::tuple, see top of 
 * cartalk_puzzle.h). Returns an empty vector if no solutions are found.
 * @param d The PronounceDict to be used to solve the puzzle.
 * @param word_list_fname The filename of the word list to be used.
 */
vector< StringTriple > cartalk_puzzle(PronounceDict d,
                                      const string& word_list_fname)
{
    /* Your code goes here! */
    PronounceDict <string, vector<string>>::iterator i;
    PronounceDict <string, vector<string>>::iterator j;
    vector <StringTriple> v();
    for (i = d.begin(); i < d.end(); i++){
        if (i->first.length() == 4){
            for( j = i; j < d.end(); i++){
                if (j->first.length() == 4) {
                    if (homophones(i->first, j->first) {
                        string w3 = i->second.substr(0,0) + j->second;
                        string w4 = j->second.substr(0,0) + i->second;
                        
                        auto f3 = d.find(w3);
                        auto f4 = d.find(w4);
                        
                        if (f3 != dict.end()){
                            if (f3->second == f1->second) {
                                v.push_back((i->first, j->first, f3->first));
                            }
                        }
                        
                        if (f4 != dict.end()){
                            if (f4->second == f1->second) {
                                v.push_back((i->first, j->first, f4->first));
                            }
                        }
                    }
                }
            }
        }
    }

    return v;
}


