/**
 * @file anagram_dict.cpp
 * Implementation of the AnagramDict class.
 *
 * @author Matt Joras
 * @date Winter 2013
 */

#include "anagram_dict.h"

#include <algorithm> /* I wonder why this is included... */
#include <fstream>

using std::string;
using std::vector;
using std::ifstream;

/** 
 * Constructs an AnagramDict from a filename with newline-separated
 * words.
 * @param filename The name of the word list file.
 */ 
AnagramDict::AnagramDict(const string& filename)
{
    /* Your code goes here! */
    ifstream words(filename);
    string word;
    string sorted;
    bool found = 0;
    if (words.is_open()) {
        while (getline(words, word)) {
            sorted = word;
            std::sort(sorted.begin(), sorted.end());
            for (auto& key_val : dict){
                if (sorted == key_val.first){
                    key_val.second.push_back(word);
                    found = 1;
                    break;
                }
            }
            if(found == 0){
                vector<string> v;
                v.push_back(word);
                dict.insert( std::pair<string, vector<string>> (sorted, v));
            }
            found = 0;
        }
    }
}

/** 
 * Constructs an AnagramDict from a vector of words.
 * @param words The vector of strings to be used as source words.
 */ 
AnagramDict::AnagramDict(const vector< string >& words)
{
    /* Your code goes here! */
    if (!words.empty()){
        string word;
        string sorted;
        bool found = 0;
        for (int i = 0; i < (int) words.size(); i++) {
            word = words[i];
            sorted = word;
            std::sort(sorted.begin(), sorted.end());
            for (auto& key_val : dict){
                if (sorted == key_val.first){
                    key_val.second.push_back(word);
                    found = 1;
                    break;
                }
            }
            if(found == 0){
                vector<string> v;
                v.push_back(word);
                dict.insert( std::pair<string, vector<string>> (sorted, v));
            }
            found = 0;

        }
    }
}

/**
 * @param word The word to find anagrams of. 
 * @return A vector of strings of anagrams of the given word. Empty
 * vector returned if no anagrams are found or the word is not in the 
 * word list.
 */
vector< string > AnagramDict::get_anagrams(const string& word) const
{
    /* Your code goes here! */
    return vector< string >();
}       

/**
 * @return A vector of vectors of strings. Each inner vector contains
 * the "anagram siblings", i.e. words that are anagrams of one another.
 * NOTE: It is impossible to have one of these vectors have less than
 * two elements, i.e. words with no anagrams are ommitted.
 */
vector< vector< string > > AnagramDict::get_all_anagrams() const
{
    /* Your code goes here! */
    return vector< vector < string > >();
}


